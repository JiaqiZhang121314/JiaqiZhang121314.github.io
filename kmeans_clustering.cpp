#include <iostream>      // 用于输入输出操作
#include <fstream>       // 用于文件读写操作
#include <vector>        // 用于使用动态数组
#include <unordered_set> // 用于存储不重复元素
#include <map>           // 用于键值对数据存储
#include <algorithm>     // 用于常用算法函数（如排序等）
#include <string>        // 用于字符串处理
#include <sstream>       // 用于字符串流处理
#include <numeric>       // 用于数值操作
#include <Eigen/Dense>   // 用于线性代数运算，矩阵和向量的操作
#include <limits>        // 用于处理数值极值
#include <cmath>         // 用于数学操作，如sqrt

using namespace std;
using namespace Eigen;

// Function to read CSV file and return patient data as vector of sets
// 从CSV文件读取患者数据，将每个患者的数据存储为unordered_set，并返回包含所有患者数据的向量
vector<unordered_set<string>> readCSV(const string& filename) {
    vector<unordered_set<string>> patients;
    ifstream file(filename);
    string line;

    while (getline(file, line)) {  // 逐行读取文件内容
        unordered_set<string> patient;  // 用于存储每个患者的特征
        stringstream ss(line);  // 使用字符串流读取每行内容
        string item;

        while (getline(ss, item, ',')) {  // 以逗号为分隔符读取每个特征
            patient.insert(item);  // 将特征插入到当前患者的特征集合中
        }
        patients.push_back(patient);  // 将患者的特征集合添加到患者向量中
    }

    return patients;  // 返回所有患者的数据
}

// Cosine similarity function
// 计算余弦相似度，用于比较两个向量之间的相似度
double cosineSimilarity(const vector<double>& vec1, const vector<double>& vec2) {
    double dotProduct = 0.0, normA = 0.0, normB = 0.0;
    for (size_t i = 0; i < vec1.size(); ++i) {
        dotProduct += vec1[i] * vec2[i];  // 计算点积
        normA += vec1[i] * vec1[i];        // 计算vec1的范数的平方
        normB += vec2[i] * vec2[i];        // 计算vec2的范数的平方
    }
    return (normA == 0 || normB == 0) ? 0 : (dotProduct / (sqrt(normA) * sqrt(normB)));  // 如果任何一个向量的范数为0，则返回0，否则返回余弦相似度
}

// K-means clustering algorithm using cosine similarity
// 使用余弦相似度的K-means聚类算法，返回聚类中心和每个数据点的聚类标签
pair<MatrixXd, VectorXi> kMeans(const MatrixXd& data, MatrixXd centroids, int k, int maxIterations) {
    int n = data.rows();  // 数据的行数，即样本数量
    VectorXi clusters = VectorXi::Zero(n);  // 用于存储每个数据点所属的聚类编号

    for (int iter = 0; iter < maxIterations; ++iter) {  // 迭代，最多运行maxIterations次
        for (int i = 0; i < n; ++i) {  // 遍历每个数据点
            double maxSimilarity = -1;  // 最大相似度初始化为-1
            int cluster = 0;  // 初始化所属聚类编号
            for (int j = 0; j < k; ++j) {  // 遍历每个聚类中心
                double similarity = cosineSimilarity(vector<double>(data.row(i).data(), data.row(i).data() + data.row(i).size()),
                                                   vector<double>(centroids.row(j).data(), centroids.row(j).data() + centroids.row(j).size()));  // 计算与聚类中心的相似度
                if (similarity > maxSimilarity) {  // 如果相似度更高
                    maxSimilarity = similarity;  // 更新最大相似度
                    cluster = j;  // 更新所属聚类编号
                }
            }
            clusters(i) = cluster;  // 将数据点i分配到相应的聚类
        }

        MatrixXd newCentroids = MatrixXd::Zero(k, data.cols());  // 用于存储新的聚类中心
        VectorXi counts = VectorXi::Zero(k);  // 用于存储每个聚类的样本数量

        for (int i = 0; i < n; ++i) {  // 遍历每个数据点
            newCentroids.row(clusters(i)) += data.row(i);  // 将数据点累加到所属聚类的聚类中心
            counts(clusters(i))++;  // 增加该聚类的样本数量
        }

        for (int j = 0; j < k; ++j) {  // 遍历每个聚类
            if (counts(j) > 0) {  // 如果聚类中有样本
                newCentroids.row(j) /= counts(j);  // 计算新的聚类中心（取平均值）
            }
        }

        if ((centroids - newCentroids).norm() < 1e-4) {  // 如果新旧聚类中心的变化小于阈值，则停止迭代
            break;
        }

        centroids = newCentroids;  // 更新聚类中心
    }

    return {centroids, clusters};  // 返回最终的聚类中心和每个数据点的聚类编号
}

// Function to convert patient data into a matrix form based on all features
// 将患者数据转换为矩阵形式，行表示患者，列表示特征
MatrixXd convertToMatrix(const vector<unordered_set<string>>& patients, const vector<string>& allFeatures) {
    MatrixXd data(patients.size(), allFeatures.size());  // 创建大小为患者数量 * 特征数量的矩阵
    for (int i = 0; i < patients.size(); ++i) {  // 遍历每个患者
        for (int j = 0; j < allFeatures.size(); ++j) {  // 遍历每个特征
            data(i, j) = patients[i].count(allFeatures[j]) ? 1.0 : 0.0;  // 如果患者具有该特征，则为1，否则为0
        }
    }
    return data;  // 返回转换后的矩阵
}

// Function to print clusters
// 输出每个聚类中的患者编号
void printClusters(const VectorXi& clusters) {
    map<int, vector<int>> cluster_map;  // 用于存储每个聚类中的患者编号
    for (int i = 0; i < clusters.size(); ++i) {  // 遍历每个患者
        cluster_map[clusters(i)].push_back(i);  // 将患者加入对应的聚类
    }

    int cluster_id = 1;  // 聚类编号从1开始
    for (const auto& cluster : cluster_map) {  // 遍历每个聚类
        cout << "Cluster " << cluster_id++ << ": ";
        for (int patient_id : cluster.second) {  // 输出聚类中的每个患者编号
            cout << patient_id + 1 << " ";  // 输出患者编号，从1开始
        }
        cout << endl;
    }
}

// Function to evaluate clusters
// 评估聚类质量，计算每个聚类的误差平方和（SSE）
void evaluateClusters(const MatrixXd& data, const MatrixXd& centroids, const VectorXi& clusters) {
    int k = centroids.rows();  // 聚类数量
    double totalSSE = 0.0;  // 总误差平方和
    vector<double> clusterSSE(k, 0.0);  // 每个聚类的误差平方和
    vector<int> clusterSizes(k, 0);  // 每个聚类中的样本数量

    for (int i = 0; i < data.rows(); ++i) {  // 遍历每个数据点
        int cluster = clusters(i);  // 获取数据点所属的聚类编号
        double distance = (data.row(i) - centroids.row(cluster)).squaredNorm();  // 计算数据点与聚类中心的距离平方
        clusterSSE[cluster] += distance;  // 累加到对应聚类的SSE
        totalSSE += distance;  // 累加到总SSE
        clusterSizes[cluster]++;  // 增加该聚类的样本数量
    }

    cout << "Cluster Evaluation:" << endl;
    for (int i = 0; i < k; ++i) {  // 输出每个聚类的SSE和大小
        cout << "Cluster " << i + 1 << ": Size = " << clusterSizes[i] << ", SSE = " << clusterSSE[i] / clusterSizes[i] << endl;
    }
    cout << "Total SSE: " << totalSSE << endl;  // 输出总SSE
}

// Function to find the closest cluster for a new patient
// 查找新患者最接近的聚类中心
int findClosestCluster(const MatrixXd& newPatient, const MatrixXd& centroids) {
    double maxSimilarity = -1;  // 最大相似度初始化为-1
    int closestCluster = -1;  // 最接近的聚类编号

    for (int i = 0; i < centroids.rows(); ++i) {  // 遍历每个聚类中心
        double similarity = cosineSimilarity(vector<double>(newPatient.data(), newPatient.data() + newPatient.size()),
                                           vector<double>(centroids.row(i).data(), centroids.row(i).data() + centroids.row(i).size()));  // 计算与聚类中心的相似度
        if (similarity > maxSimilarity) {  // 如果相似度更高
            maxSimilarity = similarity;  // 更新最大相似度
            closestCluster = i;  // 更新最接近的聚类编号
        }
    }

    return closestCluster;  // 返回最接近的聚类编号
}

// Manually create 20 patients with specific diseases (Initial centroids)
// 手动创建包含特定疾病的20个患者（初始聚类中心）
vector<unordered_set<string>> createInitialCentroids() {
    vector<unordered_set<string>> centroids(17);  // 创建17个初始聚类中心

    // 初始化每个聚类中心的特征（简化处理）
    
    centroids[0] = {"2511", "1.0", "36.0", "2.95", "27.942", "89.822", "20.702", "0.083", "4.615", "2.69", "0.684", "0.053", "0.093", "0.234", "0.983", "2.619", "2.906", "0.149", "4.088", "0.917", "0.357", "4.091", "2.158", "6.242", "1.581", "0.289", "4.885", "17.919", "0.068", "0.388", "0.174", "28.794", "1.41", "0.231", "519.546", "0.001", "12.579", "0.452", "8.294", "7.069", "0.641", "7.107", "2.605", "0.474", "8.97", "3.268", "0.263", "7.72", "0.058", "10.591", "1.865", "9.916", "13.612", "1.433", "3170.951", "1.143", "46.982", "35.044", "3.283", "43.205", "2.964", "351.959"};
    centroids[1] = {"2512", "1.0", "60.0", "1.056", "20.353", "178.114", "7.897", "0.13", "5.123", "0.409", "3.954", "0.554", "4.356", "0.242", "2.373", "13.308", "23.215", "0.461", "0.025", "1.093", "0.47", "3.027", "2.538", "0.05", "0.802", "0.207", "3.072", "3.011", "0.08", "0.036", "0.074", "11.787", "6.533", "0.492", "204.379", "0.006", "0.433", "0.136", "9.254", "7.15", "0.985", "0.44", "6.879", "1.428", "123.152", "2.076", "0.29", "0.476", "0.397", "0.41", "0.14", "0.713", "0.45", "0.079", "358.517", "0.831", "25.27", "12.706", "9.063", "154.881", "9.871", "1171.109"};
    centroids[2] = {"2513", "0.0", "43.0", "1.19", "25.187", "134.805", "16.318", "0.008", "5.284", "0.573", "1.454", "0.166", "0.686", "0.478", "0.837", "8.36", "11.088", "0.188", "0.284", "0.525", "1.364", "2.752", "1.893", "0.019", "2.193", "0.139", "3.811", "2.1", "0.042", "0.113", "0.549", "24.965", "8.824", "0.677", "495.441", "0.0", "2.298", "0.274", "14.419", "2.651", "0.336", "2.72", "0.619", "2.961", "44.141", "1.607", "0.541", "0.994", "0.155", "1.97", "0.263", "2.924", "3.277", "0.221", "390.58", "1.388", "52.505", "27.924", "4.346", "24.522", "2.723", "1065.52"};
    centroids[3] = {"2514", "1.0", "4.0", "1.52", "35.106", "220.758", "31.123", "0.15", "5.763", "3.399", "2.489", "0.16", "0.95", "0.171", "2.379", "5.657", "13.338", "0.398", "4.461", "1.125", "1.157", "5.463", "5.651", "1.056", "1.334", "0.206", "10.87", "5.683", "0.374", "0.285", "0.359", "52.833", "5.036", "0.538", "181.423", "0.006", "5.499", "1.1", "16.27", "5.206", "0.379", "3.179", "0.83", "1.115", "474.715", "72.0", "1.0", "4.073", "0.146", "3.465", "0.561", "6.444", "10.099", "1.156", "1077.268", "1.433", "38.156", "14.474", "6.185", "34.48", "2.953", "199.561"};
    centroids[4] = {"2515", "1.0", "5.0", "3.149", "44.202", "302.634", "63.255", "0.136", "6.268", "5.345", "1.794", "0.181", "1.547", "0.271", "3.378", "8.383", "18.811", "0.489", "0.131", "2.348", "0.935", "5.586", "5.372", "7.515", "2.737", "0.439", "8.879", "10.238", "0.202", "0.295", "0.354", "36.288", "4.984", "0.238", "894.39", "0.005", "5.919", "0.767", "14.97", "4.707", "7.713", "4.509", "0.416", "0.921", "349.742", "19.013", "0.63", "4.785", "0.321", "4.742", "0.643", "12.411", "12.86", "2.216", "1235.233", "1.134", "50.646", "25.638", "3.954", "19.296", "3.867", "878.436"};
    centroids[5] = {"2516", "0.0", "10.0", "1.832", "32.635", "213.66", "71.77", "0.019", "2.621", "3.662", "1.533", "0.217", "0.914", "0.364", "1.248", "7.583", "6.764", "0.251", "0.466", "3.63", "0.729", "4.181", "2.691", "1.504", "2.754", "0.058", "8.611", "4.644", "0.019", "0.186", "0.291", "30.885", "8.344", "9.197", "868.988", "0.021", "3.448", "1.048", "26.713", "2.848", "0.398", "2.491", "10.863", "3.05", "43.731", "5.195", "0.545", "1.561", "0.108", "3.733", "0.433", "6.569", "6.065", "0.457", "987.647", "0.457", "49.637", "14.077", "4.802", "23.256", "3.198", "366.39"};
    centroids[6] = {"2517", "0.0", "11.0", "1.512", "26.834", "201.648", "47.944", "0.22", "8.518", "1.86", "1.308", "0.141", "0.798", "0.201", "1.381", "4.286", "5.419", "0.538", "9.613", "2.276", "0.774", "4.599", "3.042", "1.159", "0.485", "0.351", "7.025", "6.068", "0.042", "0.228", "0.161", "25.622", "6.321", "0.385", "268.829", "0.003", "2.989", "0.572", "7.986", "2.228", "0.264", "2.319", "2.534", "1.353", "1.011", "9.845", "0.831", "3.101", "0.245", "3.32", "0.748", "6.674", "7.784", "0.56", "2335.822", "1.518", "99.454", "24.634", "5.856", "8.794", "1.967", "871.69"};
    centroids[7] = {"2518", "1.0", "", "1.568", "45.046", "320.672", "47.142", "0.029", "6.958", "0.291", "2.751", "0.438", "1.596", "0.553", "2.062", "9.686", "17.334", "0.492", "1.109", "1.691", "1.997", "3.466", "2.045", "0.097", "1.975", "0.052", "3.997", "1.706", "0.015", "0.124", "0.194", "23.577", "17.564", "0.148", "2348.533", "0.002", "1.046", "0.19", "38.676", "6.969", "1.171", "1.023", "1.074", "4.096", "3.493", "1.332", "0.7", "0.615", "0.363", "0.828", "0.119", "0.772", "0.697", "0.987", "167.128", "0.6", "76.061", "23.065", "8.618", "85.407", "4.714", "5238.496"};
    centroids[8] = {"2519", "1.0", "11.0", "2.205", "154.554", "215.339", "185.047", "0.243", "4.338", "0.963", "1.598", "0.178", "1.265", "0.294", "3.213", "13.096", "12.777", "0.3", "0.163", "3.064", "1.954", "3.189", "1.85", "10.711", "1.95", "0.208", "5.734", "17.183", "0.035", "0.198", "0.09", "20.744", "10.026", "0.101", "100.064", "0.0", "8.085", "0.428", "7.237", "7.589", "0.168", "10.921", "0.397", "0.499", "118.394", "23.963", "0.4", "4.581", "0.048", "6.612", "2.026", "24.583", "13.464", "1.013", "2069.926", "1.528", "232.759", "13.238", "5.539", "34.549", "5.138", "839.963"};
    centroids[9] = {"2547", "1.0", "58.0", "1.505", "27.742", "103.225", "44.197", "0.27", "9.013", "2.048", "1.726", "0.116", "0.182", "0.859", "2.096", "7.444", "18.33", "0.385", "1.343", "1.769", "0.556", "3.996", "4.892", "4.77", "1.375", "0.129", "8.53", "1.219", "0.057", "0.226", "0.348", "26.777", "7.428", "0.822", "627.727", "0.005", "2.143", "0.417", "8.212", "4.191", "0.538", "5.35", "10.878", "44.814", "179.525", "6.303", "1.19", "6.714", "0.213", "4.204", "0.683", "4.812", "5.102", "0.313", "600.53", "2.82", "102.053", "56.722", "4.74", "13.464", "2.124", "612.467"};
    centroids[10] = {"2548", "1.0", "39.0", "3.813", "30.381", "142.24", "14.333", "0.009", "4.564", "0.556", "0.894", "0.061", "0.283", "0.069", "1.273", "2.9", "7.766", "0.223", "1.113", "0.756", "0.435", "3.047", "1.523", "0.016", "0.217", "0.187", "2.493", "1.095", "0.039", "0.08", "0.073", "8.35", "6.689", "0.65", "200.484", "0.001", "3.02", "0.471", "4.346", "1.747", "0.252", "2.408", "0.293", "2.89", "13.905", "0.894", "0.129", "1.996", "0.126", "2.847", "0.637", "5.317", "2.756", "0.417", "155.157", "0.236", "35.549", "11.136", "2.198", "7.131", "5.484", "529.592"};
    centroids[11] = {"2549", "0.0", "11.0", "1.972", "25.547", "197.677", "41.813", "0.008", "1.371", "3.367", "2.106", "0.21", "1.363", "0.266", "2.617", "12.413", "7.967", "0.208", "0.157", "1.901", "0.961", "2.679", "2.117", "0.972", "0.21", "0.052", "4.405", "6.431", "0.04", "0.172", "0.059", "17.934", "8.153", "0.313", "187.566", "0.001", "4.704", "0.238", "5.831", "2.501", "0.287", "1.364", "0.492", "0.661", "3.247", "1.147", "0.383", "1.713", "0.102", "2.601", "0.333", "5.62", "3.601", "0.56", "931.111", "0.539", "145.161", "18.096", "4.78", "18.449", "4.472", "461.447"};
    centroids[12] = {"2550", "1.0", "30.0", "1.068", "30.15", "125.154", "31.847", "0.006", "2.595", "0.502", "1.835", "0.202", "1.633", "0.375", "1.221", "11.876", "8.712", "0.251", "0.251", "1.607", "1.278", "2.766", "4.044", "0.776", "1.21", "0.294", "3.253", "17.917", "0.013", "0.083", "0.111", "11.69", "2.171", "1.353", "654.258", "0.001", "3.039", "0.309", "7.887", "2.583", "0.662", "0.969", "63.732", "3.407", "79.755", "6.931", "0.448", "7.268", "0.392", "1.848", "0.219", "2.782", "3.255", "0.35", "2170.538", "0.729", "62.558", "10.329", "3.896", "14.777", "3.688", "866.023"};
    centroids[13] = {"2551", "0.0", "40.0", "0.6", "24.453", "159.394", "28.034", "0.009", "1.543", "1.003", "1.057", "0.148", "0.416", "0.096", "0.775", "2.11", "2.898", "0.218", "0.116", "1.016", "0.377", "1.514", "1.087", "0.02", "0.272", "0.079", "3.123", "7.698", "0.06", "0.075", "0.038", "9.016", "1.014", "0.042", "99.424", "0.002", "1.728", "0.104", "14.228", "2.514", "0.314", "0.84", "0.542", "0.712", "0.021", "8.93", "0.269", "1.237", "0.125", "1.202", "0.205", "1.788", "1.223", "0.255", "954.188", "0.592", "0.793", "12.974", "3.546", "3.578", "0.57", "350.298"};
    centroids[14] = {"2552", "0.0", "54.0", "1.971", "26.019", "181.08", "14.074", "0.077", "2.759", "0.595", "1.239", "0.194", "1.445", "0.317", "4.759", "5.708", "6.835", "0.326", "0.269", "0.533", "1.012", "2.413", "1.55", "0.116", "0.778", "0.579", "3.684", "4.827", "0.069", "0.222", "0.385", "25.211", "1.869", "0.075", "256.593", "0.001", "2.464", "0.632", "10.897", "2.705", "0.491", "1.521", "0.752", "3.01", "0.408", "7.576", "0.497", "1.555", "0.223", "1.979", "0.373", "2.096", "2.119", "0.526", "572.312", "1.737", "9.092", "20.822", "3.562", "4.895", "2.052", "917.205"};
    centroids[15] = {"2553", "1.0", "62.0", "1.81", "48.327", "299.975", "107.008", "0.68", "5.507", "1.218", "4.36", "0.358", "2.476", "0.117", "0.988", "12.765", "18.288", "0.324", "0.069", "4.123", "1.74", "3.06", "1.721", "0.512", "0.371", "0.042", "6.652", "6.645", "0.116", "0.2", "0.128", "14.228", "10.251", "0.531", "866.563", "0.003", "4.99", "0.099", "13.647", "4.643", "0.649", "2.774", "0.58", "0.895", "4.811", "3.909", "0.464", "6.185", "0.414", "1.338", "0.19", "7.638", "3.421", "0.455", "805.841", "1.028", "18.901", "14.236", "7.523", "36.606", "6.144", "3426.884"};
    centroids[16] = {"2554", "0.0", "17.0", "2.885", "22.29", "130.988", "22.466", "0.01", "1.591", "2.221", "1.631", "0.3", "1.985", "0.187", "2.115", "11.369", "42.074", "0.336", "0.454", "0.95", "0.85", "2.052", "1.417", "3.872", "1.483", "0.151", "8.533", "10.737", "0.003", "0.491", "0.153", "32.146", "9.565", "0.276", "308.812", "0.003", "8.463", "1.745", "12.222", "10.43", "0.616", "4.515", "0.5", "1.112", "326.55", "7.855", "0.867", "4.481", "0.067", "9.677", "0.704", "8.432", "11.151", "1.86", "2685.686", "3.571", "195.715", "18.797", "4.333", "19.277", "6.275", "100.718"};

    return centroids;  // 返回所有初始聚类中心
}

int main() {
    string filename = "1234.csv";  // 定义CSV文件名
    vector<unordered_set<string>> patients = readCSV(filename);  // 从CSV文件中读取患者数据

    // Collect all unique features
    unordered_set<string> featureSet;  // 用于收集所有唯一的特征
    for (const auto& patient : patients) {
        featureSet.insert(patient.begin(), patient.end());  // 将每个患者的特征加入集合中
    }

    vector<string> allFeatures(featureSet.begin(), featureSet.end());  // 将集合转换为特征向量

    // Convert patient data to matrix form
    MatrixXd data = convertToMatrix(patients, allFeatures);  // 将患者数据转换为矩阵形式

    int k = 17;  // Number of clusters
    int maxIterations = 2000;  // 最大迭代次数

    // Create initial centroids (manually defined patients)
    MatrixXd initialCentroids = convertToMatrix(createInitialCentroids(), allFeatures);  // 转换初始聚类中心为矩阵形式

    auto [centroids, clusters] = kMeans(data, initialCentroids, k, maxIterations);  // 执行K-means聚类算法

    // 保存集群结果到文件
    ofstream resultFile("kmeans_results.txt");  // 创建结果文件

    // 输出集群
    map<int, vector<int>> cluster_map;  // 用于存储每个聚类的患者编号
    for (int i = 0; i < clusters.size(); ++i) {
        cluster_map[clusters(i)].push_back(i);  // 将患者加入对应的聚类
    }

    int cluster_id = 1;  // 聚类编号从1开始
    for (const auto& cluster : cluster_map) {  // 遍历每个聚类
        resultFile << "Cluster " << cluster_id++ << ": ";
        for (int patient_id : cluster.second) {  // 输出聚类中的每个患者编号
            resultFile << patient_id + 1 << " ";  // 输出患者编号，从1开始
        }
        resultFile << endl;
    }

    // 评估集群质量
    resultFile << "Cluster Evaluation:" << endl;
    vector<double> clusterSSE(k, 0.0);  // 每个聚类的SSE
    vector<int> clusterSizes(k, 0);  // 每个聚类的大小
    double totalSSE = 0.0;  // 总SSE
    for (int i = 0; i < data.rows(); ++i) {  // 遍历每个数据点
        int cluster = clusters(i);  // 获取数据点所属的聚类编号
        double distance = (data.row(i) - centroids.row(cluster)).squaredNorm();  // 计算与聚类中心的距离平方
        clusterSSE[cluster] += distance;  // 累加到对应聚类的SSE
        totalSSE += distance;  // 累加到总SSE
        clusterSizes[cluster]++;  // 增加该聚类的样本数量
    }

    for (int i = 0; i < k; ++i) {  // 输出每个聚类的SSE和大小
        resultFile << "Cluster " << i + 1 << ": Size = " << clusterSizes[i] << ", SSE = " << clusterSSE[i] / clusterSizes[i] << endl;
    }
    resultFile << "Total SSE: " << totalSSE << endl;  // 输出总SSE

    resultFile.close();  // 关闭文件
    return 0;
}  // 结束程序

